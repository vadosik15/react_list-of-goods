{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","prevGood","nextGood","ALPHABET","localeCompare","LENGTH","length","reverse","App","state","NONE","setState","sortBy","reset","this","isListChanged","className","type","classNames","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAmBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAiBzB,OAfAG,EAAaC,MAAK,SAACC,EAAUC,GAC3B,OAAQL,GACN,KAAKJ,EAASU,SACZ,OAAOF,EAASG,cAAcF,GAChC,KAAKT,EAASY,OACZ,OAAOJ,EAASK,OAASJ,EAASI,OACpC,QACE,OAAO,MAITR,GACFC,EAAaQ,UAGRR,G,SAjCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAyCE,IAAMe,EAAb,4MACEC,MAAe,CACbX,YAAY,EACZD,SAAUJ,EAASiB,MAHvB,EAMEH,QAAU,WACR,EAAKI,UAAS,SAAAF,GAAK,MAAK,CACtBX,YAAaW,EAAMX,gBARzB,EAYEc,OAAS,SAACf,GACR,EAAKc,SAAS,CACZd,cAdN,EAkBEgB,MAAQ,WACN,EAAKF,SAAS,CACZd,SAAUJ,EAASiB,KACnBZ,YAAY,KArBlB,4CAyBE,WAAU,IAAD,OACP,EAAiCgB,KAAKL,MAA9BZ,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WACZiB,EAAgBlB,IAAaJ,EAASiB,MAAQZ,EAEpD,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBACpB,CAAE,WAAYrB,IAAaJ,EAASU,WACtCgB,QAAS,WACP,EAAKP,OAAOnB,EAASU,WALzB,iCAWA,wBACEc,KAAK,SACLD,UAAWE,IAAW,oBACpB,CAAE,WAAYrB,IAAaJ,EAASY,SACtCc,QAAS,WACP,EAAKP,OAAOnB,EAASY,SALzB,4BAWA,wBACEY,KAAK,SACLD,UAAWE,IAAW,oBACpB,CAAE,YAAapB,IACjBqB,QAAS,WACP,EAAKZ,WALT,qBAUCQ,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WACP,EAAKN,SAJT,sBAYJ,6BACE,6BACGlB,EAAkBD,EAAiB,CAAEI,aAAYD,aAC/CuB,KAAI,SAAAC,GAAI,OACP,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,iBAjFxC,GAAyBC,IAAMC,WCzD/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0eaa2933.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((prevGood, nextGood) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return prevGood.localeCompare(nextGood);\n      case SortType.LENGTH:\n        return prevGood.length - nextGood.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean;\n  sortType: SortType;\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sortBy = (sortType: SortType) => {\n    this.setState({\n      sortType,\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      sortType: SortType.NONE,\n      isReversed: false,\n    });\n  };\n\n  render() {\n    const { sortType, isReversed } = this.state;\n    const isListChanged = sortType !== SortType.NONE || isReversed;\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames('button is-info',\n              { 'is-light': sortType !== SortType.ALPHABET })}\n            onClick={() => {\n              this.sortBy(SortType.ALPHABET);\n            }}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-success',\n              { 'is-light': sortType !== SortType.LENGTH })}\n            onClick={() => {\n              this.sortBy(SortType.LENGTH);\n            }}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-warning',\n              { 'is-light': !isReversed })}\n            onClick={() => {\n              this.reverse();\n            }}\n          >\n            Reverse\n          </button>\n          {isListChanged && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                this.reset();\n              }}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          <ul>\n            {getReorderedGoods(goodsFromServer, { isReversed, sortType })\n              .map(good => (\n                <li data-cy=\"Good\" key={good}>\n                  {good}\n                </li>\n              ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}